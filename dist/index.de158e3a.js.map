{"mappings":"AAAA,kCAAkC;AAClC,gEAAgE;AAEhE,SAAS,SAAS,EAAE,EAAE,IAAI;IACtB,YAAY;IACZ,IAAI,SAAS;IACb,OAAO;QACH,IAAI,QAAQ;YACR,SAAS;YACT,GAAG,MAAM,IAAI,EAAE;YACf,WAAW;gBACP,SAAS;YACb,GAAG;QACP;IACJ;AACJ;AAEA,eAAe;IACX,MAAM,KAAK,SAAS,QAAQ,KAAK;IAEjC,GAAG,GAAG;IACN,MAAM,MAAM;IACZ,GAAG,GAAG;IACN,MAAM,MAAM;IACZ,GAAG,GAAG;IACN,MAAM,MAAM;IACZ,GAAG,GAAG;IACN,MAAM,MAAM;IACZ,GAAG,GAAG;IACN,wBAAwB;IAExB,MAAM,MAAM;IACZ,GAAG,GAAG;IACN,MAAM,MAAM;IACZ,GAAG,GAAG;AACN,UAAU;AACd;AAEA,MAAM,QAAQ,CAAC,KAAO,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;AAEnE;AAEA;;;;;;;;;;;;;;;;CAgBC,GACD,SAAS,UAAU,GAAG;IAClB,MAAM,SAAS,CAAC;IAChB,IAAK,MAAM,OAAO,IAAK;QACnB,MAAM,SAAS,IAAI,MAAM;QACzB,IAAI,OAAO,WAAW,GAClB,MAAM,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI;aACnB;YACH,MAAM,aAAa;YACnB,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,QAAQ,IAAK;gBACpC,MAAM,WAAW,MAAM,CAAC,EAAE;gBAC1B,IAAI,CAAC,UAAU,CAAC,SAAS,EACrB,UAAU,CAAC,SAAS,GAAG,CAAC;gBAE5B,IAAI,MAAM,OAAO,SAAS,GACtB,UAAU,CAAC,SAAS,GAAG,GAAG,CAAC,IAAI;gBAEnC,aAAa,UAAU,CAAC,SAAS;YACrC;QACJ;IACJ;AACJ","sources":["src/main.js"],"sourcesContent":["//  函数是一个在日常开发中经常会使用的函数，它的功能是这样子的：\n// 经过它包装的函数 fn，在两次调用时间间隔小于 wait 时间的时候，只会在最后一次调用完，再经过 wait 时间后被执行\n\nfunction debounce(fn, wait) {\n    // 在这里写下你的代码\n    let canUse = true;\n    return function () {\n        if (canUse) {\n            canUse = false;\n            fn.apply(this, arguments);\n            setTimeout(() => {\n                canUse = true;\n            }, wait);\n        }\n    };\n}\n\nasync function run() {\n    const a1 = debounce(console.log, 50);\n\n    a1(1, 2);\n    await sleep(10);\n    a1(2, 3);\n    await sleep(20);\n    a1(3, 4);\n    await sleep(30);\n    a1(4, 5);\n    await sleep(40);\n    a1(5, 6);\n    // 经过 50 毫秒（近似），只打印出 5 6\n\n    await sleep(51);\n    a1(6, 7);\n    await sleep(10);\n    a1(7, 8);\n    // 打印出 7 8\n}\n\nconst sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\nrun();\n\n/**\n * obj = {\n 'a.b.c': 1,\n 'a.d': 2,\n 'e': 3,\n}\nfunction transform(obj) {...}\n{\n  a: {\n     b: {\n       c: 1\n     },\n    d: 2\n   },\n   e: 3\n}\n */\nfunction transform(obj) {\n    const newObj = {};\n    for (const key in obj) {\n        const keyArr = key.slice(\".\");\n        if (keyArr.length === 0) {\n            newObj[key] = obj[key];\n        } else {\n            const tempNewObj = newObj;\n            for (let i = 0; i < keyArr.length; i++) {\n                const arrValue = keyArr[i];\n                if (!tempNewObj[arrValue]) {\n                    tempNewObj[arrValue] = {};\n                }\n                if (i === keyArr.length - 1) {\n                    tempNewObj[arrValue] = obj[key];\n                }\n                tempNewObj = tempNewObj[arrValue];\n            }\n        }\n    }\n}\n"],"names":[],"version":3,"file":"index.de158e3a.js.map","sourceRoot":"/__parcel_source_root/"}